TranslationUnitDecl 0x1c8db38 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x1c8e3a0 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x1c8e100 '__int128'
|-TypedefDecl 0x1c8e410 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x1c8e120 'unsigned __int128'
|-TypedefDecl 0x1c8e788 <<invalid sloc>> <invalid sloc> implicit __NSConstantString '__NSConstantString_tag'
| `-RecordType 0x1c8e500 '__NSConstantString_tag'
|   `-CXXRecord 0x1c8e468 '__NSConstantString_tag'
|-TypedefDecl 0x1c8e820 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x1c8e7e0 'char *'
|   `-BuiltinType 0x1c8dbe0 'char'
|-TypedefDecl 0x1cd32d8 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list '__va_list_tag[1]'
| `-ConstantArrayType 0x1cd3280 '__va_list_tag[1]' 1 
|   `-RecordType 0x1c8e910 '__va_list_tag'
|     `-CXXRecord 0x1c8e878 '__va_list_tag'
|-CXXRecordDecl 0x1cd3330 <code.cpp:1:1, line:3:1> line:1:8 struct aaa definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x1cd3448 <col:1, col:8> col:8 implicit struct aaa
| `-FieldDecl 0x1cd34f0 <line:2:5, col:9> col:9 x 'int'
|-CXXRecordDecl 0x1cd3558 <line:5:1, line:9:1> line:5:7 union bbb definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal has_variant_members
| | |-DefaultConstructor exists trivial needs_implicit
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x1cd3678 <col:1, col:7> col:7 implicit union bbb
| |-FieldDecl 0x1cd3720 <line:6:5, col:9> col:9 random1 'int'
| |-FieldDecl 0x1cd3780 <line:7:5, col:10> col:10 random2 'char'
| `-FieldDecl 0x1cd37e8 <line:8:5, col:11> col:11 random3 'float'
|-CXXRecordDecl 0x1cd3850 <line:11:1, line:17:1> line:11:7 referenced class foo definition
| |-DefinitionData empty standard_layout has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided defaulted_is_constexpr
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor
| | |-CopyAssignment simple trivial has_const_param implicit_has_const_param
| | |-MoveAssignment
| | `-Destructor non_trivial user_declared
| |-CXXRecordDecl 0x1cd3968 <col:1, col:7> col:7 implicit referenced class foo
| |-AccessSpecDecl 0x1cd39f8 <line:12:5, col:11> col:5 public
| |-CXXConstructorDecl 0x1cd3aa8 <line:13:9, col:16> col:9 used foo 'void ()'
| | `-CompoundStmt 0x1cd3cd0 <col:15, col:16>
| |-CXXDestructorDecl 0x1cd3b98 <line:14:9, col:17> col:9 used ~foo 'void () noexcept'
| | `-CompoundStmt 0x1cd3d08 <col:16, col:17>
| |-AccessSpecDecl 0x1cd3c80 <line:15:5, col:12> col:5 private
| |-AccessSpecDecl 0x1cd3ca8 <line:16:5, col:14> col:5 protected
| |-CXXConstructorDecl 0x1d05138 <line:11:7> col:7 implicit constexpr foo 'void (const foo &)' inline default trivial noexcept-unevaluated 0x1d05138
| | `-ParmVarDecl 0x1d05248 <col:7> col:7 'const foo &'
| `-CXXMethodDecl 0x1d061a8 <col:7> col:7 implicit operator= 'foo &(const foo &)' inline default trivial noexcept-unevaluated 0x1d061a8
|   `-ParmVarDecl 0x1d062b8 <col:7> col:7 'const foo &'
|-CXXRecordDecl 0x1cd3d18 <line:19:1, line:23:1> line:19:7 referenced class bar definition
| |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment simple trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x1cd3e38 <col:1, col:7> col:7 implicit class bar
| |-AccessSpecDecl 0x1cd3ec8 <line:20:5, col:11> col:5 public
| |-AccessSpecDecl 0x1cd3ef0 <line:21:5, col:12> col:5 private
| |-AccessSpecDecl 0x1cd3f18 <line:22:5, col:14> col:5 protected
| |-CXXConstructorDecl 0x1d05308 <line:19:7> col:7 implicit constexpr bar 'void (const bar &)' inline default trivial noexcept-unevaluated 0x1d05308
| | `-ParmVarDecl 0x1d05418 <col:7> col:7 'const bar &'
| |-CXXConstructorDecl 0x1d059f8 <col:7> col:7 implicit constexpr bar 'void (bar &&)' inline default trivial noexcept-unevaluated 0x1d059f8
| | `-ParmVarDecl 0x1d05b08 <col:7> col:7 'bar &&'
| |-CXXDestructorDecl 0x1d05d28 <col:7> col:7 implicit ~bar 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0x1d06358 <col:7> col:7 implicit constexpr operator= 'bar &(const bar &)' inline default trivial noexcept-unevaluated 0x1d06358
| | `-ParmVarDecl 0x1d06468 <col:7> col:7 'const bar &'
| |-CXXMethodDecl 0x1d064d8 <col:7> col:7 implicit constexpr operator= 'bar &(bar &&)' inline default trivial noexcept-unevaluated 0x1d064d8
| | `-ParmVarDecl 0x1d065e8 <col:7> col:7 'bar &&'
| `-CXXConstructorDecl 0x1d07810 <col:7> col:7 implicit used constexpr bar 'void () noexcept' inline default trivial
|   `-CompoundStmt 0x1d07be8 <col:7>
|-CXXRecordDecl 0x1cd3f58 <line:25:1, line:29:1> line:25:7 class baz definition
| |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x1cd4078 <col:1, col:7> col:7 implicit class baz
| |-AccessSpecDecl 0x1cd4108 <line:26:5, col:11> col:5 public
| |-AccessSpecDecl 0x1cd4130 <line:27:5, col:12> col:5 private
| `-AccessSpecDecl 0x1cd4158 <line:28:5, col:14> col:5 protected
|-CXXRecordDecl 0x1cd4198 <line:31:1, line:49:1> line:31:7 referenced class Base definition
| |-DefinitionData empty aggregate standard_layout can_const_default_init
| | |-DefaultConstructor exists non_trivial
| | |-CopyConstructor simple trivial has_const_param needs_overload_resolution implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_overload_resolution
| | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_overload_resolution
| | `-Destructor simple non_trivial needs_overload_resolution
| |-public 'foo'
| |-public 'bar'
| |-CXXRecordDecl 0x1d04568 <col:1, col:7> col:7 implicit class Base
| |-AccessSpecDecl 0x1d045f8 <line:32:5, col:11> col:5 public
| |-CXXMethodDecl 0x1d047c0 <line:33:5, line:35:5> line:33:9 used add 'int (int, int)'
| | |-ParmVarDecl 0x1d04638 <col:13, col:17> col:17 used x 'int'
| | |-ParmVarDecl 0x1d046b8 <col:20, col:24> col:24 used y 'int'
| | `-CompoundStmt 0x1d06800 <col:27, line:35:5>
| |   `-ReturnStmt 0x1d067f0 <line:34:9, col:20>
| |     `-BinaryOperator 0x1d067d0 <col:16, col:20> 'int' '+'
| |       |-ImplicitCastExpr 0x1d067a0 <col:16> 'int' <LValueToRValue>
| |       | `-DeclRefExpr 0x1d06760 <col:16> 'int' lvalue ParmVar 0x1d04638 'x' 'int'
| |       `-ImplicitCastExpr 0x1d067b8 <col:20> 'int' <LValueToRValue>
| |         `-DeclRefExpr 0x1d06780 <col:20> 'int' lvalue ParmVar 0x1d046b8 'y' 'int'
| |-CXXMethodDecl 0x1d049a8 <line:36:5, line:38:5> line:36:9 used sub 'int (int, int)'
| | |-ParmVarDecl 0x1d04888 <col:13, col:17> col:17 used x 'int'
| | |-ParmVarDecl 0x1d04908 <col:20, col:24> col:24 used y 'int'
| | `-CompoundStmt 0x1d068b8 <col:27, line:38:5>
| |   `-ReturnStmt 0x1d068a8 <line:37:9, col:20>
| |     `-BinaryOperator 0x1d06888 <col:16, col:20> 'int' '-'
| |       |-ImplicitCastExpr 0x1d06858 <col:16> 'int' <LValueToRValue>
| |       | `-DeclRefExpr 0x1d06818 <col:16> 'int' lvalue ParmVar 0x1d04888 'x' 'int'
| |       `-ImplicitCastExpr 0x1d06870 <col:20> 'int' <LValueToRValue>
| |         `-DeclRefExpr 0x1d06838 <col:20> 'int' lvalue ParmVar 0x1d04908 'y' 'int'
| |-AccessSpecDecl 0x1d04a58 <line:39:5, col:12> col:5 private
| |-CXXMethodDecl 0x1d04bb8 <line:40:5, line:42:5> line:40:9 mul 'int (int, int)'
| | |-ParmVarDecl 0x1d04a98 <col:13, col:17> col:17 used x 'int'
| | |-ParmVarDecl 0x1d04b18 <col:20, col:24> col:24 used y 'int'
| | `-CompoundStmt 0x1d06970 <col:27, line:42:5>
| |   `-ReturnStmt 0x1d06960 <line:41:9, col:20>
| |     `-BinaryOperator 0x1d06940 <col:16, col:20> 'int' '*'
| |       |-ImplicitCastExpr 0x1d06910 <col:16> 'int' <LValueToRValue>
| |       | `-DeclRefExpr 0x1d068d0 <col:16> 'int' lvalue ParmVar 0x1d04a98 'x' 'int'
| |       `-ImplicitCastExpr 0x1d06928 <col:20> 'int' <LValueToRValue>
| |         `-DeclRefExpr 0x1d068f0 <col:20> 'int' lvalue ParmVar 0x1d04b18 'y' 'int'
| |-CXXMethodDecl 0x1d04de8 <line:43:5, line:45:5> line:43:10 arrayFunc 'void (char *)'
| | |-ParmVarDecl 0x1d04cf0 <col:20, col:35> col:25 charArray 'char *':'char *'
| | `-CompoundStmt 0x1d06998 <col:38, line:45:5>
| |   `-ReturnStmt 0x1d06988 <line:44:9>
| |-CXXMethodDecl 0x1d05038 <line:46:5, line:48:5> line:46:10 intArrayFunc 'void (int *)'
| | |-ParmVarDecl 0x1d04f40 <col:23, col:36> col:27 intArray 'int *':'int *'
| | `-CompoundStmt 0x1d07540 <col:39, line:48:5>
| |   `-ReturnStmt 0x1d069b0 <line:47:9>
| |-CXXConstructorDecl 0x1d05ba0 <line:31:7> col:7 implicit constexpr Base 'void (const Base &)' inline default trivial noexcept-unevaluated 0x1d05ba0
| | `-ParmVarDecl 0x1d05cb8 <col:7> col:7 'const Base &'
| |-CXXConstructorDecl 0x1d05e38 <col:7> col:7 implicit constexpr Base 'void (Base &&)' inline default trivial noexcept-unevaluated 0x1d05e38
| | `-ParmVarDecl 0x1d05f48 <col:7> col:7 'Base &&'
| |-CXXMethodDecl 0x1d05ff8 <col:7> col:7 implicit operator= 'Base &(Base &&)' inline default trivial noexcept-unevaluated 0x1d05ff8
| | `-ParmVarDecl 0x1d06108 <col:7> col:7 'Base &&'
| |-CXXDestructorDecl 0x1d06680 <col:7> col:7 implicit used ~Base 'void () noexcept' inline default
| | `-CompoundStmt 0x1d07cc8 <col:7>
| `-CXXConstructorDecl 0x1d07738 <col:7> col:7 implicit used Base 'void () noexcept(false)' inline default
|   |-CXXCtorInitializer 'foo'
|   | `-CXXConstructExpr 0x1d07b90 <col:7> 'foo' 'void ()'
|   |-CXXCtorInitializer 'bar'
|   | `-CXXConstructExpr 0x1d07c28 <col:7> 'bar' 'void () noexcept'
|   `-CompoundStmt 0x1d07c90 <col:7>
`-FunctionDecl 0x1d075b0 <line:51:1, line:57:1> line:51:5 main 'int ()'
  `-CompoundStmt 0x1d07ea0 <col:12, line:57:1>
    |-DeclStmt 0x1d07cd8 <line:52:5, col:14>
    | `-VarDecl 0x1d076d0 <col:5, col:10> col:10 used base 'Base' callinit destroyed
    |   `-CXXConstructExpr 0x1d07ca0 <col:10> 'Base' 'void () noexcept(false)'
    |-CXXMemberCallExpr 0x1d07d80 <line:53:5, col:18> 'int'
    | |-MemberExpr 0x1d07d10 <col:5, col:10> '<bound member function type>' .add 0x1d047c0
    | | `-DeclRefExpr 0x1d07cf0 <col:5> 'Base' lvalue Var 0x1d076d0 'base' 'Base'
    | |-IntegerLiteral 0x1d07d40 <col:14> 'int' 1
    | `-IntegerLiteral 0x1d07d60 <col:17> 'int' 2
    |-CXXMemberCallExpr 0x1d07e40 <line:54:5, col:18> 'int'
    | |-MemberExpr 0x1d07dd0 <col:5, col:10> '<bound member function type>' .sub 0x1d049a8
    | | `-DeclRefExpr 0x1d07db0 <col:5> 'Base' lvalue Var 0x1d076d0 'base' 'Base'
    | |-IntegerLiteral 0x1d07e00 <col:14> 'int' 2
    | `-IntegerLiteral 0x1d07e20 <col:17> 'int' 1
    `-ReturnStmt 0x1d07e90 <line:56:5, col:12>
      `-IntegerLiteral 0x1d07e70 <col:12> 'int' 0
