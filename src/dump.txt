TranslationUnitDecl 0x14aa938 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x14ab1a0 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x14aaf00 '__int128'
|-TypedefDecl 0x14ab210 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x14aaf20 'unsigned __int128'
|-TypedefDecl 0x14ab588 <<invalid sloc>> <invalid sloc> implicit __NSConstantString '__NSConstantString_tag'
| `-RecordType 0x14ab300 '__NSConstantString_tag'
|   `-CXXRecord 0x14ab268 '__NSConstantString_tag'
|-TypedefDecl 0x14ab620 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x14ab5e0 'char *'
|   `-BuiltinType 0x14aa9e0 'char'
|-TypedefDecl 0x14f0298 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list '__va_list_tag[1]'
| `-ConstantArrayType 0x14f0240 '__va_list_tag[1]' 1 
|   `-RecordType 0x14ab710 '__va_list_tag'
|     `-CXXRecord 0x14ab678 '__va_list_tag'
|-CXXRecordDecl 0x14f02f0 <code.cpp:1:1, line:5:1> line:1:7 referenced class foo definition
| |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x14f0408 <col:1, col:7> col:7 implicit class foo
| |-AccessSpecDecl 0x14f0498 <line:2:5, col:12> col:5 private
| |-AccessSpecDecl 0x14f04c0 <line:3:5, col:11> col:5 public
| |-AccessSpecDecl 0x14f04e8 <line:4:5, col:14> col:5 protected
| |-CXXConstructorDecl 0x1521578 <line:1:7> col:7 implicit used constexpr foo 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x1523ad8 <col:7>
| |-CXXDestructorDecl 0x1521650 <col:7> col:7 implicit ~foo 'void ()' inline default trivial noexcept-unevaluated 0x1521650
| |-CXXConstructorDecl 0x1521b28 <col:7> col:7 implicit constexpr foo 'void (const foo &)' inline default trivial noexcept-unevaluated 0x1521b28
| | `-ParmVarDecl 0x1521c38 <col:7> col:7 'const foo &'
| `-CXXConstructorDecl 0x1521ce8 <col:7> col:7 implicit constexpr foo 'void (foo &&)' inline default trivial noexcept-unevaluated 0x1521ce8
|   `-ParmVarDecl 0x1521df8 <col:7> col:7 'foo &&'
|-CXXRecordDecl 0x14f0528 <line:7:1, line:11:1> line:7:7 referenced class bar definition
| |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x14f0648 <col:1, col:7> col:7 implicit class bar
| |-AccessSpecDecl 0x14f06d8 <line:8:5, col:12> col:5 private
| |-AccessSpecDecl 0x14f0700 <line:9:5, col:11> col:5 public
| |-AccessSpecDecl 0x14f0728 <line:10:5, col:14> col:5 protected
| |-CXXConstructorDecl 0x1521748 <line:7:7> col:7 implicit used constexpr bar 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x1523c30 <col:7>
| |-CXXDestructorDecl 0x1521820 <col:7> col:7 implicit ~bar 'void ()' inline default trivial noexcept-unevaluated 0x1521820
| |-CXXConstructorDecl 0x1521ea8 <col:7> col:7 implicit constexpr bar 'void (const bar &)' inline default trivial noexcept-unevaluated 0x1521ea8
| | `-ParmVarDecl 0x1523198 <col:7> col:7 'const bar &'
| `-CXXConstructorDecl 0x1523248 <col:7> col:7 implicit constexpr bar 'void (bar &&)' inline default trivial noexcept-unevaluated 0x1523248
|   `-ParmVarDecl 0x1523358 <col:7> col:7 'bar &&'
|-CXXRecordDecl 0x14f0768 <line:13:1, line:17:1> line:13:7 referenced class baz definition
| |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x14f0888 <col:1, col:7> col:7 implicit class baz
| |-AccessSpecDecl 0x14f0918 <line:14:5, col:12> col:5 private
| |-AccessSpecDecl 0x14f0940 <line:15:5, col:11> col:5 public
| |-AccessSpecDecl 0x14f0968 <line:16:5, col:14> col:5 protected
| |-CXXConstructorDecl 0x1521918 <line:13:7> col:7 implicit used constexpr baz 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x1523d80 <col:7>
| |-CXXDestructorDecl 0x15219f0 <col:7> col:7 implicit ~baz 'void ()' inline default trivial noexcept-unevaluated 0x15219f0
| |-CXXConstructorDecl 0x1523408 <col:7> col:7 implicit constexpr baz 'void (const baz &)' inline default trivial noexcept-unevaluated 0x1523408
| | `-ParmVarDecl 0x1523518 <col:7> col:7 'const baz &'
| `-CXXConstructorDecl 0x15235c8 <col:7> col:7 implicit constexpr baz 'void (baz &&)' inline default trivial noexcept-unevaluated 0x15235c8
|   `-ParmVarDecl 0x15236d8 <col:7> col:7 'baz &&'
|-CXXRecordDecl 0x14f09a8 <line:19:1, line:31:1> line:19:7 referenced class Base definition
| |-DefinitionData pass_in_registers empty standard_layout trivially_copyable trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-public 'foo'
| |-private 'bar'
| |-protected 'baz'
| |-CXXRecordDecl 0x14f0b88 <col:1, col:7> col:7 implicit class Base
| |-AccessSpecDecl 0x14f0c18 <line:20:5, col:11> col:5 public
| |-CXXMethodDecl 0x14f0de0 <line:21:5, line:23:5> line:21:9 used add 'int (int, int)'
| | |-ParmVarDecl 0x14f0c58 <col:13, col:17> col:17 used x 'int'
| | |-ParmVarDecl 0x14f0cd8 <col:20, col:24> col:24 used y 'int'
| | `-CompoundStmt 0x15210d8 <col:27, line:23:5>
| |   `-ReturnStmt 0x15210c8 <line:22:9, col:20>
| |     `-BinaryOperator 0x15210a8 <col:16, col:20> 'int' '+'
| |       |-ImplicitCastExpr 0x1521078 <col:16> 'int' <LValueToRValue>
| |       | `-DeclRefExpr 0x1521038 <col:16> 'int' lvalue ParmVar 0x14f0c58 'x' 'int'
| |       `-ImplicitCastExpr 0x1521090 <col:20> 'int' <LValueToRValue>
| |         `-DeclRefExpr 0x1521058 <col:20> 'int' lvalue ParmVar 0x14f0cd8 'y' 'int'
| |-CXXMethodDecl 0x14f0fc8 <line:24:5, line:26:5> line:24:9 sub 'int (int, int)'
| | |-ParmVarDecl 0x14f0ea8 <col:13, col:17> col:17 used x 'int'
| | |-ParmVarDecl 0x14f0f28 <col:20, col:24> col:24 used y 'int'
| | `-CompoundStmt 0x1521190 <col:27, line:26:5>
| |   `-ReturnStmt 0x1521180 <line:25:9, col:20>
| |     `-BinaryOperator 0x1521160 <col:16, col:20> 'int' '-'
| |       |-ImplicitCastExpr 0x1521130 <col:16> 'int' <LValueToRValue>
| |       | `-DeclRefExpr 0x15210f0 <col:16> 'int' lvalue ParmVar 0x14f0ea8 'x' 'int'
| |       `-ImplicitCastExpr 0x1521148 <col:20> 'int' <LValueToRValue>
| |         `-DeclRefExpr 0x1521110 <col:20> 'int' lvalue ParmVar 0x14f0f28 'y' 'int'
| |-AccessSpecDecl 0x14f1078 <line:27:5, col:12> col:5 private
| |-CXXMethodDecl 0x1520f70 <line:28:5, line:30:5> line:28:9 mul 'int (int, int)'
| | |-ParmVarDecl 0x14f10b8 <col:13, col:17> col:17 used x 'int'
| | |-ParmVarDecl 0x14f1138 <col:20, col:24> col:24 used y 'int'
| | `-CompoundStmt 0x1521248 <col:27, line:30:5>
| |   `-ReturnStmt 0x1521238 <line:29:9, col:20>
| |     `-BinaryOperator 0x1521218 <col:16, col:20> 'int' '*'
| |       |-ImplicitCastExpr 0x15211e8 <col:16> 'int' <LValueToRValue>
| |       | `-DeclRefExpr 0x15211a8 <col:16> 'int' lvalue ParmVar 0x14f10b8 'x' 'int'
| |       `-ImplicitCastExpr 0x1521200 <col:20> 'int' <LValueToRValue>
| |         `-DeclRefExpr 0x15211c8 <col:20> 'int' lvalue ParmVar 0x14f1138 'y' 'int'
| |-CXXConstructorDecl 0x1521450 <line:19:7> col:7 implicit used constexpr Base 'void () noexcept' inline default trivial
| | |-CXXCtorInitializer 'foo'
| | | `-CXXConstructExpr 0x1523bd8 <col:7> 'foo' 'void () noexcept'
| | |-CXXCtorInitializer 'bar'
| | | `-CXXConstructExpr 0x1523d28 <col:7> 'bar' 'void () noexcept'
| | |-CXXCtorInitializer 'baz'
| | | `-CXXConstructExpr 0x1523e78 <col:7> 'baz' 'void () noexcept'
| | `-CompoundStmt 0x1523ee8 <col:7>
| |-CXXConstructorDecl 0x1523758 <col:7> col:7 implicit constexpr Base 'void (const Base &)' inline default trivial noexcept-unevaluated 0x1523758
| | `-ParmVarDecl 0x1523868 <col:7> col:7 'const Base &'
| `-CXXConstructorDecl 0x1523918 <col:7> col:7 implicit constexpr Base 'void (Base &&)' inline default trivial noexcept-unevaluated 0x1523918
|   `-ParmVarDecl 0x1523a28 <col:7> col:7 'Base &&'
`-FunctionDecl 0x15212b0 <line:33:1, line:38:1> line:33:5 main 'int ()'
  `-CompoundStmt 0x15240e8 <col:12, line:38:1>
    |-DeclStmt 0x1523fe0 <line:34:5, col:14>
    | `-VarDecl 0x15213d0 <col:5, col:10> col:10 used base 'Base' callinit
    |   `-CXXConstructExpr 0x1523fb8 <col:10> 'Base' 'void () noexcept'
    |-CXXMemberCallExpr 0x1524088 <line:35:5, col:18> 'int'
    | |-MemberExpr 0x1524018 <col:5, col:10> '<bound member function type>' .add 0x14f0de0
    | | `-DeclRefExpr 0x1523ff8 <col:5> 'Base' lvalue Var 0x15213d0 'base' 'Base'
    | |-IntegerLiteral 0x1524048 <col:14> 'int' 1
    | `-IntegerLiteral 0x1524068 <col:17> 'int' 2
    `-ReturnStmt 0x15240d8 <line:37:5, col:12>
      `-IntegerLiteral 0x15240b8 <col:12> 'int' 0
