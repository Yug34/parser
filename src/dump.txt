TranslationUnitDecl 0xa3e938 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0xa3f1a0 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0xa3ef00 '__int128'
|-TypedefDecl 0xa3f210 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0xa3ef20 'unsigned __int128'
|-TypedefDecl 0xa3f588 <<invalid sloc>> <invalid sloc> implicit __NSConstantString '__NSConstantString_tag'
| `-RecordType 0xa3f300 '__NSConstantString_tag'
|   `-CXXRecord 0xa3f268 '__NSConstantString_tag'
|-TypedefDecl 0xa3f620 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0xa3f5e0 'char *'
|   `-BuiltinType 0xa3e9e0 'char'
|-TypedefDecl 0xa844d8 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list '__va_list_tag[1]'
| `-ConstantArrayType 0xa84480 '__va_list_tag[1]' 1 
|   `-RecordType 0xa3f710 '__va_list_tag'
|     `-CXXRecord 0xa3f678 '__va_list_tag'
|-CXXRecordDecl 0xa84530 <code.cpp:1:1, line:7:1> line:1:7 referenced class foo definition
| |-DefinitionData empty standard_layout has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided defaulted_is_constexpr
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor
| | |-CopyAssignment simple trivial has_const_param implicit_has_const_param
| | |-MoveAssignment
| | `-Destructor non_trivial user_declared
| |-CXXRecordDecl 0xa84648 <col:1, col:7> col:7 implicit referenced class foo
| |-AccessSpecDecl 0xa846d8 <line:2:5, col:11> col:5 public
| |-CXXConstructorDecl 0xa84788 <line:3:9, col:16> col:9 used foo 'void ()'
| | `-CompoundStmt 0xa849b0 <col:15, col:16>
| |-CXXDestructorDecl 0xa84878 <line:4:9, col:17> col:9 used ~foo 'void () noexcept'
| | `-CompoundStmt 0xa849e8 <col:16, col:17>
| |-AccessSpecDecl 0xa84960 <line:5:5, col:12> col:5 private
| |-AccessSpecDecl 0xa84988 <line:6:5, col:14> col:5 protected
| |-CXXConstructorDecl 0xab5508 <line:1:7> col:7 implicit constexpr foo 'void (const foo &)' inline default trivial noexcept-unevaluated 0xab5508
| | `-ParmVarDecl 0xab5618 <col:7> col:7 'const foo &'
| `-CXXMethodDecl 0xab7168 <col:7> col:7 implicit operator= 'foo &(const foo &)' inline default trivial noexcept-unevaluated 0xab7168
|   `-ParmVarDecl 0xab7278 <col:7> col:7 'const foo &'
|-CXXRecordDecl 0xa849f8 <line:9:1, line:13:1> line:9:7 referenced class bar definition
| |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment simple trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0xa84b18 <col:1, col:7> col:7 implicit class bar
| |-AccessSpecDecl 0xa84ba8 <line:10:5, col:11> col:5 public
| |-AccessSpecDecl 0xa84bd0 <line:11:5, col:12> col:5 private
| |-AccessSpecDecl 0xa84bf8 <line:12:5, col:14> col:5 protected
| |-CXXConstructorDecl 0xab56d8 <line:9:7> col:7 implicit constexpr bar 'void (const bar &)' inline default trivial noexcept-unevaluated 0xab56d8
| | `-ParmVarDecl 0xab57e8 <col:7> col:7 'const bar &'
| |-CXXConstructorDecl 0xab5888 <col:7> col:7 implicit constexpr bar 'void (bar &&)' inline default trivial noexcept-unevaluated 0xab5888
| | `-ParmVarDecl 0xab5998 <col:7> col:7 'bar &&'
| |-CXXDestructorDecl 0xab5f38 <col:7> col:7 implicit ~bar 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0xab7318 <col:7> col:7 implicit constexpr operator= 'bar &(const bar &)' inline default trivial noexcept-unevaluated 0xab7318
| | `-ParmVarDecl 0xab7428 <col:7> col:7 'const bar &'
| |-CXXMethodDecl 0xab7498 <col:7> col:7 implicit constexpr operator= 'bar &(bar &&)' inline default trivial noexcept-unevaluated 0xab7498
| | `-ParmVarDecl 0xab75a8 <col:7> col:7 'bar &&'
| `-CXXConstructorDecl 0xab8480 <col:7> col:7 implicit used constexpr bar 'void () noexcept' inline default trivial
|   `-CompoundStmt 0xab8a08 <col:7>
|-CXXRecordDecl 0xa84c38 <line:15:1, line:19:1> line:15:7 referenced class baz definition
| |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment simple trivial has_const_param implicit_has_const_param
| | |-MoveAssignment exists simple trivial
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0xa84d58 <col:1, col:7> col:7 implicit class baz
| |-AccessSpecDecl 0xa84de8 <line:16:5, col:11> col:5 public
| |-AccessSpecDecl 0xa84e10 <line:17:5, col:12> col:5 private
| |-AccessSpecDecl 0xa84e38 <line:18:5, col:14> col:5 protected
| |-CXXConstructorDecl 0xab5a58 <line:15:7> col:7 implicit constexpr baz 'void (const baz &)' inline default trivial noexcept-unevaluated 0xab5a58
| | `-ParmVarDecl 0xab5b68 <col:7> col:7 'const baz &'
| |-CXXConstructorDecl 0xab5c08 <col:7> col:7 implicit constexpr baz 'void (baz &&)' inline default trivial noexcept-unevaluated 0xab5c08
| | `-ParmVarDecl 0xab5d18 <col:7> col:7 'baz &&'
| |-CXXDestructorDecl 0xab6020 <col:7> col:7 implicit ~baz 'void () noexcept' inline default trivial
| |-CXXMethodDecl 0xab7658 <col:7> col:7 implicit constexpr operator= 'baz &(const baz &)' inline default trivial noexcept-unevaluated 0xab7658
| | `-ParmVarDecl 0xab7768 <col:7> col:7 'const baz &'
| |-CXXMethodDecl 0xab77d8 <col:7> col:7 implicit constexpr operator= 'baz &(baz &&)' inline default trivial noexcept-unevaluated 0xab77d8
| | `-ParmVarDecl 0xab78e8 <col:7> col:7 'baz &&'
| `-CXXConstructorDecl 0xab8570 <col:7> col:7 implicit used constexpr baz 'void () noexcept' inline default trivial
|   `-CompoundStmt 0xab8aa0 <col:7>
|-CXXRecordDecl 0xa84e78 <line:21:1, line:33:1> line:21:7 referenced class Base definition
| |-DefinitionData empty standard_layout can_const_default_init
| | |-DefaultConstructor exists non_trivial
| | |-CopyConstructor simple trivial has_const_param needs_overload_resolution implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_overload_resolution
| | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_overload_resolution
| | `-Destructor simple non_trivial needs_overload_resolution
| |-public 'foo'
| |-private 'bar'
| |-protected 'baz'
| |-CXXRecordDecl 0xa85058 <col:1, col:7> col:7 implicit class Base
| |-AccessSpecDecl 0xa850e8 <line:22:5, col:11> col:5 public
| |-CXXMethodDecl 0xa852b0 <line:23:5, line:25:5> line:23:9 used add 'int (int, int)'
| | |-ParmVarDecl 0xa85128 <col:13, col:17> col:17 used x 'int'
| | |-ParmVarDecl 0xa851a8 <col:20, col:24> col:24 used y 'int'
| | `-CompoundStmt 0xab7b00 <col:27, line:25:5>
| |   `-ReturnStmt 0xab7af0 <line:24:9, col:20>
| |     `-BinaryOperator 0xab7ad0 <col:16, col:20> 'int' '+'
| |       |-ImplicitCastExpr 0xab7aa0 <col:16> 'int' <LValueToRValue>
| |       | `-DeclRefExpr 0xab7a60 <col:16> 'int' lvalue ParmVar 0xa85128 'x' 'int'
| |       `-ImplicitCastExpr 0xab7ab8 <col:20> 'int' <LValueToRValue>
| |         `-DeclRefExpr 0xab7a80 <col:20> 'int' lvalue ParmVar 0xa851a8 'y' 'int'
| |-CXXMethodDecl 0xab51e8 <line:26:5, line:28:5> line:26:9 sub 'int (int, int)'
| | |-ParmVarDecl 0xa85378 <col:13, col:17> col:17 used x 'int'
| | |-ParmVarDecl 0xa853f8 <col:20, col:24> col:24 used y 'int'
| | `-CompoundStmt 0xab7bb8 <col:27, line:28:5>
| |   `-ReturnStmt 0xab7ba8 <line:27:9, col:20>
| |     `-BinaryOperator 0xab7b88 <col:16, col:20> 'int' '-'
| |       |-ImplicitCastExpr 0xab7b58 <col:16> 'int' <LValueToRValue>
| |       | `-DeclRefExpr 0xab7b18 <col:16> 'int' lvalue ParmVar 0xa85378 'x' 'int'
| |       `-ImplicitCastExpr 0xab7b70 <col:20> 'int' <LValueToRValue>
| |         `-DeclRefExpr 0xab7b38 <col:20> 'int' lvalue ParmVar 0xa853f8 'y' 'int'
| |-AccessSpecDecl 0xab5298 <line:29:5, col:12> col:5 private
| |-CXXMethodDecl 0xab53f8 <line:30:5, line:32:5> line:30:9 mul 'int (int, int)'
| | |-ParmVarDecl 0xab52d8 <col:13, col:17> col:17 used x 'int'
| | |-ParmVarDecl 0xab5358 <col:20, col:24> col:24 used y 'int'
| | `-CompoundStmt 0xab7c70 <col:27, line:32:5>
| |   `-ReturnStmt 0xab7c60 <line:31:9, col:20>
| |     `-BinaryOperator 0xab7c40 <col:16, col:20> 'int' '*'
| |       |-ImplicitCastExpr 0xab7c10 <col:16> 'int' <LValueToRValue>
| |       | `-DeclRefExpr 0xab7bd0 <col:16> 'int' lvalue ParmVar 0xab52d8 'x' 'int'
| |       `-ImplicitCastExpr 0xab7c28 <col:20> 'int' <LValueToRValue>
| |         `-DeclRefExpr 0xab7bf0 <col:20> 'int' lvalue ParmVar 0xab5358 'y' 'int'
| |-CXXConstructorDecl 0xab5db0 <line:21:7> col:7 implicit constexpr Base 'void (const Base &)' inline default trivial noexcept-unevaluated 0xab5db0
| | `-ParmVarDecl 0xab5ec8 <col:7> col:7 'const Base &'
| |-CXXConstructorDecl 0xab6df0 <col:7> col:7 implicit constexpr Base 'void (Base &&)' inline default trivial noexcept-unevaluated 0xab6df0
| | `-ParmVarDecl 0xab6f08 <col:7> col:7 'Base &&'
| |-CXXMethodDecl 0xab6fb8 <col:7> col:7 implicit operator= 'Base &(Base &&)' inline default trivial noexcept-unevaluated 0xab6fb8
| | `-ParmVarDecl 0xab70c8 <col:7> col:7 'Base &&'
| |-CXXDestructorDecl 0xab7980 <col:7> col:7 implicit used ~Base 'void () noexcept' inline default
| | `-CompoundStmt 0xab8b80 <col:7>
| `-CXXConstructorDecl 0xab83a8 <col:7> col:7 implicit used Base 'void () noexcept(false)' inline default
|   |-CXXCtorInitializer 'foo'
|   | `-CXXConstructExpr 0xab89b0 <col:7> 'foo' 'void ()'
|   |-CXXCtorInitializer 'bar'
|   | `-CXXConstructExpr 0xab8a48 <col:7> 'bar' 'void () noexcept'
|   |-CXXCtorInitializer 'baz'
|   | `-CXXConstructExpr 0xab8ad8 <col:7> 'baz' 'void () noexcept'
|   `-CompoundStmt 0xab8b48 <col:7>
`-FunctionDecl 0xab7ce0 <line:35:1, line:40:1> line:35:5 main 'int ()'
  `-CompoundStmt 0xab8c98 <col:12, line:40:1>
    |-DeclStmt 0xab8b90 <line:36:5, col:14>
    | `-VarDecl 0xab8340 <col:5, col:10> col:10 used base 'Base' callinit destroyed
    |   `-CXXConstructExpr 0xab8b58 <col:10> 'Base' 'void () noexcept(false)'
    |-CXXMemberCallExpr 0xab8c38 <line:37:5, col:18> 'int'
    | |-MemberExpr 0xab8bc8 <col:5, col:10> '<bound member function type>' .add 0xa852b0
    | | `-DeclRefExpr 0xab8ba8 <col:5> 'Base' lvalue Var 0xab8340 'base' 'Base'
    | |-IntegerLiteral 0xab8bf8 <col:14> 'int' 1
    | `-IntegerLiteral 0xab8c18 <col:17> 'int' 2
    `-ReturnStmt 0xab8c88 <line:39:5, col:12>
      `-IntegerLiteral 0xab8c68 <col:12> 'int' 0
